// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BalanceWithdrawn extends ethereum.Event {
  get params(): BalanceWithdrawn__Params {
    return new BalanceWithdrawn__Params(this);
  }
}

export class BalanceWithdrawn__Params {
  _event: BalanceWithdrawn;

  constructor(event: BalanceWithdrawn) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MintCapChanged extends ethereum.Event {
  get params(): MintCapChanged__Params {
    return new MintCapChanged__Params(this);
  }
}

export class MintCapChanged__Params {
  _event: MintCapChanged;

  constructor(event: MintCapChanged) {
    this._event = event;
  }

  get newMintCap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldMintCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MintPriceChanged extends ethereum.Event {
  get params(): MintPriceChanged__Params {
    return new MintPriceChanged__Params(this);
  }
}

export class MintPriceChanged__Params {
  _event: MintPriceChanged;

  constructor(event: MintPriceChanged) {
    this._event = event;
  }

  get newMintPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldMintPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrivateModeIsOn extends ethereum.Event {
  get params(): PrivateModeIsOn__Params {
    return new PrivateModeIsOn__Params(this);
  }
}

export class PrivateModeIsOn__Params {
  _event: PrivateModeIsOn;

  constructor(event: PrivateModeIsOn) {
    this._event = event;
  }
}

export class PublicModeIsOn extends ethereum.Event {
  get params(): PublicModeIsOn__Params {
    return new PublicModeIsOn__Params(this);
  }
}

export class PublicModeIsOn__Params {
  _event: PublicModeIsOn;

  constructor(event: PublicModeIsOn) {
    this._event = event;
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UserMinted extends ethereum.Event {
  get params(): UserMinted__Params {
    return new UserMinted__Params(this);
  }
}

export class UserMinted__Params {
  _event: UserMinted;

  constructor(event: UserMinted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintMode(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get totalMintFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get extraPaid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get launchpadFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get mintedFreeSpotsCount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get mintedGuaranteedSpotsCount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get mintedRaceSpotsCount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get privateModeMintCount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get mintedIds(): Array<BigInt> {
    return this._event.parameters[9].value.toBigIntArray();
  }
}

export class UsersUnfreezed extends ethereum.Event {
  get params(): UsersUnfreezed__Params {
    return new UsersUnfreezed__Params(this);
  }
}

export class UsersUnfreezed__Params {
  _event: UsersUnfreezed;

  constructor(event: UsersUnfreezed) {
    this._event = event;
  }

  get users(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class WhitelistModeIsOn extends ethereum.Event {
  get params(): WhitelistModeIsOn__Params {
    return new WhitelistModeIsOn__Params(this);
  }
}

export class WhitelistModeIsOn__Params {
  _event: WhitelistModeIsOn;

  constructor(event: WhitelistModeIsOn) {
    this._event = event;
  }
}

export class WinnersAreSet extends ethereum.Event {
  get params(): WinnersAreSet__Params {
    return new WinnersAreSet__Params(this);
  }
}

export class WinnersAreSet__Params {
  _event: WinnersAreSet;

  constructor(event: WinnersAreSet) {
    this._event = event;
  }

  get allocations(): Array<WinnersAreSetAllocationsStruct> {
    return this._event.parameters[0].value.toTupleArray<
      WinnersAreSetAllocationsStruct
    >();
  }

  get lastSlot(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get deletePreviousWinners(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get deletedWinners(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }
}

export class WinnersAreSetAllocationsStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get rank(): BigInt {
    return this[1].toBigInt();
  }

  get spots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get freeSpots(): BigInt {
    return this[3].toBigInt();
  }

  get guaranteedSpots(): BigInt {
    return this[4].toBigInt();
  }

  get raceSpots(): BigInt {
    return this[5].toBigInt();
  }
}

export class baseURIIsSet extends ethereum.Event {
  get params(): baseURIIsSet__Params {
    return new baseURIIsSet__Params(this);
  }
}

export class baseURIIsSet__Params {
  _event: baseURIIsSet;

  constructor(event: baseURIIsSet) {
    this._event = event;
  }

  get baseURI(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ERC721NFTCollection__whitelistedUsersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getFreeSpots(): BigInt {
    return this.value0;
  }

  getGuaranteedSpots(): BigInt {
    return this.value1;
  }

  getRaceSpots(): BigInt {
    return this.value2;
  }

  getFreeSpotsMinted(): BigInt {
    return this.value3;
  }

  getRaceSpotsMinted(): BigInt {
    return this.value4;
  }

  getGuaranteedSpotsMinted(): BigInt {
    return this.value5;
  }

  getRank(): BigInt {
    return this.value6;
  }

  getIsWhitelisted(): boolean {
    return this.value7;
  }

  getIsFreezed(): boolean {
    return this.value8;
  }
}

export class ERC721NFTCollection extends ethereum.SmartContract {
  static bind(address: Address): ERC721NFTCollection {
    return new ERC721NFTCollection("ERC721NFTCollection", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  COLLECTION_CREATOR_ROLE(): Bytes {
    let result = super.call(
      "COLLECTION_CREATOR_ROLE",
      "COLLECTION_CREATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_COLLECTION_CREATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "COLLECTION_CREATOR_ROLE",
      "COLLECTION_CREATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ERC721NFTCollectionImpl(): Address {
    let result = super.call(
      "ERC721NFTCollectionImpl",
      "ERC721NFTCollectionImpl():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ERC721NFTCollectionImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ERC721NFTCollectionImpl",
      "ERC721NFTCollectionImpl():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SUPER_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "SUPER_ADMIN_ROLE",
      "SUPER_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SUPER_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SUPER_ADMIN_ROLE",
      "SUPER_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  baseURIHash(): Bytes {
    let result = super.call("baseURIHash", "baseURIHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_baseURIHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("baseURIHash", "baseURIHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  collectionCreatorAddress(): Address {
    let result = super.call(
      "collectionCreatorAddress",
      "collectionCreatorAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collectionCreatorAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collectionCreatorAddress",
      "collectionCreatorAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  freeSpot(): BigInt {
    let result = super.call("freeSpot", "freeSpot():(uint256)", []);

    return result[0].toBigInt();
  }

  try_freeSpot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("freeSpot", "freeSpot():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBalance(): BigInt {
    let result = super.call("getBalance", "getBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMode(): i32 {
    let result = super.call("getMode", "getMode():(uint8)", []);

    return result[0].toI32();
  }

  try_getMode(): ethereum.CallResult<i32> {
    let result = super.tryCall("getMode", "getMode():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getNumberOfRaceSpots(user: Address): BigInt {
    let result = super.call(
      "getNumberOfRaceSpots",
      "getNumberOfRaceSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getNumberOfRaceSpots(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfRaceSpots",
      "getNumberOfRaceSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfRemainingFreeSpots(user: Address): BigInt {
    let result = super.call(
      "getNumberOfRemainingFreeSpots",
      "getNumberOfRemainingFreeSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getNumberOfRemainingFreeSpots(
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfRemainingFreeSpots",
      "getNumberOfRemainingFreeSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfRemainingGuaranteedSpots(user: Address): BigInt {
    let result = super.call(
      "getNumberOfRemainingGuaranteedSpots",
      "getNumberOfRemainingGuaranteedSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getNumberOfRemainingGuaranteedSpots(
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfRemainingGuaranteedSpots",
      "getNumberOfRemainingGuaranteedSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfRemainingRaceSpots(user: Address): BigInt {
    let result = super.call(
      "getNumberOfRemainingRaceSpots",
      "getNumberOfRemainingRaceSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getNumberOfRemainingRaceSpots(
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfRemainingRaceSpots",
      "getNumberOfRemainingRaceSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfTotalRemainingNFTs(): BigInt {
    let result = super.call(
      "getNumberOfTotalRemainingNFTs",
      "getNumberOfTotalRemainingNFTs():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfTotalRemainingNFTs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfTotalRemainingNFTs",
      "getNumberOfTotalRemainingNFTs():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfTotalRemainingRaceNFTs(): BigInt {
    let result = super.call(
      "getNumberOfTotalRemainingRaceNFTs",
      "getNumberOfTotalRemainingRaceNFTs():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfTotalRemainingRaceNFTs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfTotalRemainingRaceNFTs",
      "getNumberOfTotalRemainingRaceNFTs():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPosition(user: Address): BigInt {
    let result = super.call("getPosition", "getPosition(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getPosition(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPosition",
      "getPosition(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTotalMintPrice(
    guaranteedMintCount: BigInt,
    raceMintCount: BigInt
  ): BigInt {
    let result = super.call(
      "getTotalMintPrice",
      "getTotalMintPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(guaranteedMintCount),
        ethereum.Value.fromUnsignedBigInt(raceMintCount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalMintPrice(
    guaranteedMintCount: BigInt,
    raceMintCount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalMintPrice",
      "getTotalMintPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(guaranteedMintCount),
        ethereum.Value.fromUnsignedBigInt(raceMintCount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalNumberOfFreeSpots(user: Address): BigInt {
    let result = super.call(
      "getTotalNumberOfFreeSpots",
      "getTotalNumberOfFreeSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getTotalNumberOfFreeSpots(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalNumberOfFreeSpots",
      "getTotalNumberOfFreeSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalNumberOfGuaranteedSpots(user: Address): BigInt {
    let result = super.call(
      "getTotalNumberOfGuaranteedSpots",
      "getTotalNumberOfGuaranteedSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getTotalNumberOfGuaranteedSpots(
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalNumberOfGuaranteedSpots",
      "getTotalNumberOfGuaranteedSpots(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserMintedSpots(user: Address): Array<boolean> {
    let result = super.call(
      "getUserMintedSpots",
      "getUserMintedSpots(address):(bool[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBooleanArray();
  }

  try_getUserMintedSpots(user: Address): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "getUserMintedSpots",
      "getUserMintedSpots(address):(bool[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  getUserSpots(user: Address): Array<BigInt> {
    let result = super.call(
      "getUserSpots",
      "getUserSpots(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigIntArray();
  }

  try_getUserSpots(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserSpots",
      "getUserSpots(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getWinners(): Array<Address> {
    let result = super.call("getWinners", "getWinners():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getWinners(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getWinners", "getWinners():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  guaranteedWithNoDiscountSpot(): BigInt {
    let result = super.call(
      "guaranteedWithNoDiscountSpot",
      "guaranteedWithNoDiscountSpot():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_guaranteedWithNoDiscountSpot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "guaranteedWithNoDiscountSpot",
      "guaranteedWithNoDiscountSpot():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelisted(user: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  launchpadFeePercentage(): BigInt {
    let result = super.call(
      "launchpadFeePercentage",
      "launchpadFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_launchpadFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "launchpadFeePercentage",
      "launchpadFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  launchpadFeeWallet(): Address {
    let result = super.call(
      "launchpadFeeWallet",
      "launchpadFeeWallet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_launchpadFeeWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "launchpadFeeWallet",
      "launchpadFeeWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxMintCount(): BigInt {
    let result = super.call("maxMintCount", "maxMintCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxMintCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxMintCount", "maxMintCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintCap(): BigInt {
    let result = super.call("mintCap", "mintCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintCap", "mintCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintExpirationTime(): BigInt {
    let result = super.call(
      "mintExpirationTime",
      "mintExpirationTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_mintExpirationTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintExpirationTime",
      "mintExpirationTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintPrice(): BigInt {
    let result = super.call("mintPrice", "mintPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintPrice", "mintPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mode(): i32 {
    let result = super.call("mode", "mode():(uint8)", []);

    return result[0].toI32();
  }

  try_mode(): ethereum.CallResult<i32> {
    let result = super.tryCall("mode", "mode():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftCollectionType(): string {
    let result = super.call(
      "nftCollectionType",
      "nftCollectionType():(string)",
      []
    );

    return result[0].toString();
  }

  try_nftCollectionType(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "nftCollectionType",
      "nftCollectionType():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  numberOfFreeNFTs(): BigInt {
    let result = super.call(
      "numberOfFreeNFTs",
      "numberOfFreeNFTs():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfFreeNFTs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfFreeNFTs",
      "numberOfFreeNFTs():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfGuaranteedNFTs(): BigInt {
    let result = super.call(
      "numberOfGuaranteedNFTs",
      "numberOfGuaranteedNFTs():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfGuaranteedNFTs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfGuaranteedNFTs",
      "numberOfGuaranteedNFTs():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfRaceNFTs(): BigInt {
    let result = super.call(
      "numberOfRaceNFTs",
      "numberOfRaceNFTs():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfRaceNFTs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfRaceNFTs",
      "numberOfRaceNFTs():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  raceSpot(): BigInt {
    let result = super.call("raceSpot", "raceSpot():(uint256)", []);

    return result[0].toBigInt();
  }

  try_raceSpot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("raceSpot", "raceSpot():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalFreeAllocated(): BigInt {
    let result = super.call(
      "totalFreeAllocated",
      "totalFreeAllocated():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFreeAllocated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFreeAllocated",
      "totalFreeAllocated():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalGuaranteedAllocated(): BigInt {
    let result = super.call(
      "totalGuaranteedAllocated",
      "totalGuaranteedAllocated():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalGuaranteedAllocated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalGuaranteedAllocated",
      "totalGuaranteedAllocated():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRaceMinted(): BigInt {
    let result = super.call(
      "totalRaceMinted",
      "totalRaceMinted():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalRaceMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRaceMinted",
      "totalRaceMinted():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelistMintStartDate(): BigInt {
    let result = super.call(
      "whitelistMintStartDate",
      "whitelistMintStartDate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_whitelistMintStartDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "whitelistMintStartDate",
      "whitelistMintStartDate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelistedUsers(
    param0: Address
  ): ERC721NFTCollection__whitelistedUsersResult {
    let result = super.call(
      "whitelistedUsers",
      "whitelistedUsers(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new ERC721NFTCollection__whitelistedUsersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toBoolean()
    );
  }

  try_whitelistedUsers(
    param0: Address
  ): ethereum.CallResult<ERC721NFTCollection__whitelistedUsersResult> {
    let result = super.tryCall(
      "whitelistedUsers",
      "whitelistedUsers(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721NFTCollection__whitelistedUsersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toBoolean()
      )
    );
  }

  winners(param0: BigInt): Address {
    let result = super.call("winners", "winners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_winners(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("winners", "winners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get freeMintCount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get guaranteedMintCount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get raceMintCount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get privateModeMintCount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get _BaseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetMintCapCall extends ethereum.Call {
  get inputs(): SetMintCapCall__Inputs {
    return new SetMintCapCall__Inputs(this);
  }

  get outputs(): SetMintCapCall__Outputs {
    return new SetMintCapCall__Outputs(this);
  }
}

export class SetMintCapCall__Inputs {
  _call: SetMintCapCall;

  constructor(call: SetMintCapCall) {
    this._call = call;
  }

  get _mintCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMintCapCall__Outputs {
  _call: SetMintCapCall;

  constructor(call: SetMintCapCall) {
    this._call = call;
  }
}

export class SetMintPriceCall extends ethereum.Call {
  get inputs(): SetMintPriceCall__Inputs {
    return new SetMintPriceCall__Inputs(this);
  }

  get outputs(): SetMintPriceCall__Outputs {
    return new SetMintPriceCall__Outputs(this);
  }
}

export class SetMintPriceCall__Inputs {
  _call: SetMintPriceCall;

  constructor(call: SetMintPriceCall) {
    this._call = call;
  }

  get _mintPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMintPriceCall__Outputs {
  _call: SetMintPriceCall;

  constructor(call: SetMintPriceCall) {
    this._call = call;
  }
}

export class SetPrivateModeCall extends ethereum.Call {
  get inputs(): SetPrivateModeCall__Inputs {
    return new SetPrivateModeCall__Inputs(this);
  }

  get outputs(): SetPrivateModeCall__Outputs {
    return new SetPrivateModeCall__Outputs(this);
  }
}

export class SetPrivateModeCall__Inputs {
  _call: SetPrivateModeCall;

  constructor(call: SetPrivateModeCall) {
    this._call = call;
  }
}

export class SetPrivateModeCall__Outputs {
  _call: SetPrivateModeCall;

  constructor(call: SetPrivateModeCall) {
    this._call = call;
  }
}

export class SetPublicModeCall extends ethereum.Call {
  get inputs(): SetPublicModeCall__Inputs {
    return new SetPublicModeCall__Inputs(this);
  }

  get outputs(): SetPublicModeCall__Outputs {
    return new SetPublicModeCall__Outputs(this);
  }
}

export class SetPublicModeCall__Inputs {
  _call: SetPublicModeCall;

  constructor(call: SetPublicModeCall) {
    this._call = call;
  }
}

export class SetPublicModeCall__Outputs {
  _call: SetPublicModeCall;

  constructor(call: SetPublicModeCall) {
    this._call = call;
  }
}

export class SetWhitelistedUsersCall extends ethereum.Call {
  get inputs(): SetWhitelistedUsersCall__Inputs {
    return new SetWhitelistedUsersCall__Inputs(this);
  }

  get outputs(): SetWhitelistedUsersCall__Outputs {
    return new SetWhitelistedUsersCall__Outputs(this);
  }
}

export class SetWhitelistedUsersCall__Inputs {
  _call: SetWhitelistedUsersCall;

  constructor(call: SetWhitelistedUsersCall) {
    this._call = call;
  }

  get allocations(): Array<SetWhitelistedUsersCallAllocationsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetWhitelistedUsersCallAllocationsStruct
    >();
  }

  get numberOfNFTs(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get deletedWinners(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get lastSlot(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get deletePreviousWinners(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class SetWhitelistedUsersCall__Outputs {
  _call: SetWhitelistedUsersCall;

  constructor(call: SetWhitelistedUsersCall) {
    this._call = call;
  }
}

export class SetWhitelistedUsersCallAllocationsStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get rank(): BigInt {
    return this[1].toBigInt();
  }

  get spots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get freeSpots(): BigInt {
    return this[3].toBigInt();
  }

  get guaranteedSpots(): BigInt {
    return this[4].toBigInt();
  }

  get raceSpots(): BigInt {
    return this[5].toBigInt();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnfreezeUsersCall extends ethereum.Call {
  get inputs(): UnfreezeUsersCall__Inputs {
    return new UnfreezeUsersCall__Inputs(this);
  }

  get outputs(): UnfreezeUsersCall__Outputs {
    return new UnfreezeUsersCall__Outputs(this);
  }
}

export class UnfreezeUsersCall__Inputs {
  _call: UnfreezeUsersCall;

  constructor(call: UnfreezeUsersCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class UnfreezeUsersCall__Outputs {
  _call: UnfreezeUsersCall;

  constructor(call: UnfreezeUsersCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCall extends ethereum.Call {
  get inputs(): WithdrawBalanceCall__Inputs {
    return new WithdrawBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceCall__Outputs {
    return new WithdrawBalanceCall__Outputs(this);
  }
}

export class WithdrawBalanceCall__Inputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawBalanceCall__Outputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}
